var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var KL = function(p, q, supp) {
  var P = distProbs(p, supp), Q = distProbs(q, supp);
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


var exp = function(x){ return Math.exp(x); };

var probability = function(x, Dist) {
    return exp(Dist.score(x));
}

var marginalize = function(myDist, label){
    Infer({method: "enumerate"}, function(){
        var x = sample(myDist);
        return x[label]
    });
};


var dataFrame = function(d, fieldsToNumerify){
    return map(
        function(lst){
            return _.fromPairs(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ?
                            [l[0], utils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1))
}

var readERP = function(file){
    var data = utils.readCSV(file).data
    var dataObject =  _.fromPairs(data.slice(0,data.length-1))
    var erpList = map(
            function(lst){
                return map(
                    function(i){
                        return utils.isNumeric(i) ? utils.wpParseFloat(i) : i
                    },
                    lst)
            },
            _.pairs(dataObject)
            )
    var probs = map(last,erpList)
    var vals = map(function(e){return most(e)[0]},erpList)
    return Enumerate(function(){
        return vals[discrete(probs)]
    })
}

var readQueryERP = function(file){
    var data = utils.readCSV(file).data
    var dataObject =  dataFrame(data.slice(0,data.length-1))
    var erpList = map(
            function(obj){
                return map(
                    function(lst){
                        return utils.isNumeric(lst[1]) ? utils.wpParseFloat(lst[1]) : lst[1]
                    },
                    _.toPairs(obj))
            },
            dataObject
            )
    var probs = map(last,erpList)
    var vals = map(function(e){return _.object(
        _.zip(
          most(_.keys(dataObject[0])),
            most(e)
            )
        )},erpList)
    return Enumerate(function(){
        return vals[discrete(probs)]
    })
}


var levels = function(df, label){
  return _.uniqBy(_.map(df, label));
}

var round = function(x){
  return Math.round(x*10)/10
}
