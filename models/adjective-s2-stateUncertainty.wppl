// webppl adjective-s2-stateUncertainty.wppl --require adjectiveRSA

var alphas = {s1: 5, s2: 2};

var literalListener = cache(function(utterance, threshold) {
  Infer({model: function(){
    var state = sample(statePrior["super"]);
    var m = meaning(utterance, state, threshold);
    condition(m);
    return state;
  }})
})

var speaker1 = cache(function(state, threshold, form) {
  Infer({model: function(){
    var utterance = sample(utterancePrior(form))
    var L0 = literalListener(utterance, threshold)
    factor( alphas.s1 * L0.score(state) )
    return utterance
  }})
})

var pragmaticListener = function(utterance, form) {
  Infer({model: function(){
    var state = sample(statePrior["super"]);
    var threshold = sample(thresholdPrior(form));
    var S1 = speaker1(state, threshold, form);
    observe(S1, utterance);
    return state
  }})
}

var speaker2 = function(form){
  Infer({model: function(){
    var speakerBeliefs = statePrior["sub"];
    var utterance = sample(utterancePrior(form));
    var L1 = pragmaticListener(utterance, form)

    var _kl = KL(speakerBeliefs, L1, speakerBeliefs.support());
    factor(-1 * _kl)
    return utterance
    }})
}

speaker2("positive")
